[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev_cards",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "nbdev_cards",
    "section": "Install",
    "text": "Install\npip install nbdev_cards"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev_cards",
    "section": "How to use",
    "text": "How to use\nThis lib provides a Card class you can use to create display and compare playing cards\n\nCard(1,3)"
  },
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "Card–A basic playing cards",
    "section": "",
    "text": "suits = ['♠','♥','♦','♣']\nsuits\n\n['♠', '♥', '♦', '♣']\n(Note that there isn’t a card at position 0 since we want the indices to match the ranks)"
  },
  {
    "objectID": "card.html#comparison-operators",
    "href": "card.html#comparison-operators",
    "title": "Card–A basic playing cards",
    "section": "COMPARISON OPERATORS",
    "text": "COMPARISON OPERATORS\nTo implement eq or other comparison operators as an external method from fastcore.utils import *\nand here use the decorator @patch\n\ntest_eq(Card(suit=1,rank=2), Card(suit=1,rank=2))\ntest_ne(Card(suit=1,rank=2), Card(suit=1,rank=3))\n\n\nassert(Card(suit=1,rank=1) < Card(suit=1,rank=2))\nassert(Card(suit=1,rank=2) < Card(suit=2,rank=3))\n\n\n@patch\ndef __gt__(self: 'Card', a: 'Card'):\n           return (self.suit, self.rank) > (a.suit, a.rank)\n\n\nassert(Card(suit=1,rank=4) > Card(suit=1,rank=2))\nassert not(Card(suit=2,rank=1) > Card(suit=3,rank=2))\n\n\nprint(c)\n\n3♥\n\n\n\nfrom execnb.nbio import dict2nb\n\n\nsource\n\nCard\n\n Card (suit:int, rank:int)\n\nA playing card\n\n\n\n\nType\nDetails\n\n\n\n\nsuit\nint\nAn index into suits\n\n\nrank\nint\nAn index into ranks\n\n\n\n\nsource\n\n\ndict2nb\n\n dict2nb (js=None, **kwargs)\n\nConvert dict js to an AttrDict,\nEquality, greater than and lower than works on rank and suit indices\n\ntest_eq?\n\n\nSignature: test_eq(a, b)\nDocstring: `test` that `a==b`\nFile:      /opt/conda/lib/python3.10/site-packages/fastcore/test.py\nType:      function\n\n\n\n\n\ntest_eq??\n\n\nSignature: test_eq(a, b)\nSource:   \ndef test_eq(a,b):\n    \"`test` that `a==b`\"\n    test(a,b,equals, '==')\nFile:      /opt/conda/lib/python3.10/site-packages/fastcore/test.py\nType:      function\n\n\n\n\n\ntest_eq(Card(suit=1,rank=2), Card(suit=1,rank=2))\ntest_ne(Card(suit=1,rank=2), Card(suit=1,rank=3))"
  },
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "Card–A basic playing cards",
    "section": "",
    "text": "suits = ['♠','♥','♦','♣']\nsuits\n\n['♠', '♥', '♦', '♣']\n(Note that there isn’t a card at position 0 since we want the indices to match the ranks)"
  },
  {
    "objectID": "deck.html#comparison-operators",
    "href": "deck.html#comparison-operators",
    "title": "Card–A basic playing cards",
    "section": "COMPARISON OPERATORS",
    "text": "COMPARISON OPERATORS\nTo implement eq or other comparison operators as an external method from fastcore.utils import *\nand here use the decorator @patch\n\n@patch\ndef __eq__(self: 'Card', a: 'Card'):\n    return (self.suit, self.rank)==(a.suit, a.rank)\n\n\ntest_eq(Card(suit=1,rank=2), Card(suit=1,rank=2))\ntest_ne(Card(suit=1,rank=2), Card(suit=1,rank=3))\n\n\n@patch\ndef __lt__(self: 'Card', a: 'Card'):\n        return (self.suit, self.rank)<(a.suit, a.rank)\n\n\nassert(Card(suit=1,rank=1) < Card(suit=1,rank=2))\nassert(Card(suit=1,rank=2) < Card(suit=2,rank=3))\n\n\n@patch\ndef __gt__(self: 'Card', a: 'Card'):\n           return (self.suit, self.rank) > (a.suit, a.rank)\n\n\nassert(Card(suit=1,rank=4) > Card(suit=1,rank=2))\nassert not(Card(suit=2,rank=1) > Card(suit=3,rank=2))\n\n\nprint(c)\n\n3♥\n\n\n\nfrom execnb.nbio import dict2nb\n\n\nsource\n\nCard\n\n Card (suit:int, rank:int)\n\nA playing card\n\n\n\n\nType\nDetails\n\n\n\n\nsuit\nint\nAn index into suits\n\n\nrank\nint\nAn index into ranks\n\n\n\n\nsource\n\n\ndict2nb\n\n dict2nb (js=None, **kwargs)\n\nConvert dict js to an AttrDict,\nEquality, greater than and lower than works on rank and suit indices\n\ntest_eq?\n\n\nSignature: test_eq(a, b)\nDocstring: `test` that `a==b`\nFile:      /opt/conda/lib/python3.10/site-packages/fastcore/test.py\nType:      function\n\n\n\n\n\ntest_eq??\n\n\nSignature: test_eq(a, b)\nSource:   \ndef test_eq(a,b):\n    \"`test` that `a==b`\"\n    test(a,b,equals, '==')\nFile:      /opt/conda/lib/python3.10/site-packages/fastcore/test.py\nType:      function\n\n\n\n\n\ntest_eq(Card(suit=1,rank=2), Card(suit=1,rank=2))\ntest_ne(Card(suit=1,rank=2), Card(suit=1,rank=3))"
  }
]